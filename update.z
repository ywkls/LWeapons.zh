//LW_ZH Update functions.

//Fixes Link's collision detection if it needs it.

void UpdateLWZH1(){
	__CollDetectFix();
	__ReflectedFix1();
	__Carry_InputBlock();
}

//Handle restoring Link's collision detection.

void __CollDetectFix(){
	//Link's collision detection is off.
	if(!Link->CollDetection){
		//No Lweapons exist that turn it off.
		if(NumMiscLWeapons(LW_ZH_I_FLAGS,LWF_LINK_NO_COLL)==0
			&& !LW_Vars[NOT_COLL])
			//Turn it on again.
			Link->CollDetection = true;
	}
}

void __ReflectedFix1(){
	 for(int i=Screen->NumLWeapons(); i>0; i--){
		lweapon wpn=Screen->LoadLWeapon(i);
		
		// If this is a dummy, or if it's not a ghost.zh weapon, don't do anything
		if((wpn->Misc[LW_ZH_I_FLAGS]&__LWFI_IS_LWZH_LWPN)==0)
			continue;
	
		if(wpn->ID== LW_REFMAGIC||
			wpn->ID== LW_REFFIREBALL||
			wpn->ID== LW_REFROCK||
			wpn->ID== LW_REFBEAM){
			if(LinkCollision(wpn))
				wpn->CollDetection = false;
			else
				wpn->CollDetection = true;
		}
    }
}

void __Carry_InputBlock(){
	if(NumMoveLWeapons(LWM_CARRY)!=0){
		lweapon wpn = FindLWeaponMove(LWM_CARRY);
		if(GetEquipmentA()!=wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]){
			Link->PressB=false;
			Link->InputB=false;
		}
		else{
			Link->PressA = false;
			Link->InputA = false;
		}
	}
}

// Calls UpdateLWeapon() on every eweapon on the screen

void UpdateLWZH2(){
    lweapon wpn;
    
    for(int i=Screen->NumLWeapons(); i>0; i--){
		wpn=Screen->LoadLWeapon(i);
		
		// If this is a dummy, or if it's not a ghost.zh weapon, don't do anything
		if((wpn->Misc[LW_ZH_I_FLAGS]&__LWFI_IS_LWZH_LWPN)==0)
			continue;
	
		UpdateLWZH(wpn);
		__ReflectedFix2(wpn);
    }
}

void __ReflectedFix2(lweapon wpn){
	if(wpn->ID== LW_REFMAGIC||
		wpn->ID== LW_REFFIREBALL||
		wpn->ID== LW_REFROCK||
		wpn->ID== LW_REFBEAM){
		if(LinkCollision(wpn))
			wpn->CollDetection = false;
		else
			wpn->CollDetection = true;
	}
}


//Updates fancy lweapon movement stuff.

// Update a weapon's movement, lifespan, and death effects
void UpdateLWZH(lweapon wpn){
	
    // Is the weapon still active?
    if((wpn->Misc[LW_ZH_I_FLAGS]&__LWFI_DEAD )==0){
        // Start movement updates
        if(wpn->Misc[LW_ZH_I_MOVEMENT]!=0){
            if(wpn->Misc[LW_ZH_I_MOVEMENT]!=0){
				if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_SINE_WAVE)
					__UpdateLWMSineWave(wpn);
				else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_HOMING)
					__UpdateLWMHoming(wpn);
				else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_THROW)
                    __UpdateLWMThrow(wpn);
                else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_FALL)
                    __UpdateLWMFall(wpn);
				else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_CIRCLE)
					__UpdateLWM_Circle(wpn);
				//else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_HOOKSHOT
						  //&& (wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_RETURN)==0
						  //&& (wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_HS_GRAB)==0)
					//__UpdateLWM_Hookshot(wpn);
				else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_BRANG)
					__UpdateLWM_BRang(wpn);
				else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_MELEE){
					__UpdateLWM_Melee(wpn);
				
					//__UpdateLWE_Melee(wpn);
				}
				else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_CARRY)
					__UpdateLWM_Carry(wpn);
				else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_DUAL_FX)
					__UpdateLWM_Dual(wpn);
				else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_FULL_SCREEN)
					__UpdateLWM_FullScreen(wpn);
			}
        } // End movement updates
        
        // Start lifespan updates
        if(wpn->Misc[LW_ZH_I_LIFESPAN]!=0)
        {
			if(wpn->Misc[LW_ZH_I_LIFESPAN]==LWL_TIMER){
				wpn->Misc[LW_ZH_I_LIFESPAN_ARG]-=1;
				if(wpn->Misc[LW_ZH_I_LIFESPAN_ARG]<=0)
				   KillLWeapon(wpn);
			}
			else if(wpn->Misc[LW_ZH_I_LIFESPAN]==LWL_SOLID){
				if(__IsSolid(wpn)){
					if(wpn->Misc[LW_ZH_I_LIFESPAN_ARG]!=0
						&& !ComboTAtWpn(wpn,wpn->Misc[LW_ZH_I_LIFESPAN_ARG]))
					KillLWeapon(wpn);
				}
			}
           	else if(wpn->Misc[LW_ZH_I_LIFESPAN]==LWL_MP_COST){
				if(wpn->Misc[LW_ZH_I_LIFESPAN_ARG]>0){
					if(Game->Generic[GEN_MAGICDRAINRATE]==0)
						wpn->Misc[LW_ZH_I_WORK_3]= (wpn->Misc[LW_ZH_I_WORK_3]+1)%wpn->Misc[LW_ZH_I_LIFESPAN_ARG];
					else
						wpn->Misc[LW_ZH_I_WORK_3]= (wpn->Misc[LW_ZH_I_WORK_3]+1)
													%(wpn->Misc[LW_ZH_I_LIFESPAN_ARG]*2);
					if(wpn->Misc[LW_ZH_I_WORK_3]==0 && Link->MP>0)
						Link->MP--;
					if(Link->MP<=0){
						KillLWeapon(wpn);
						Link->MP =0;
					}
				}
				else{
					if(Link->MP<=0){
						KillLWeapon(wpn);
						Link->MP =0;
					}
				}
			}
			else if(wpn->Misc[LW_ZH_I_LIFESPAN]==LWL_EDGE){
				if(OnScreenEdge(wpn)){
					if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_BRANG)
						wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_RETURN;
					else
						KillLWeapon(wpn);
				}	
			}
        } // End lifespan updates
		
		if(wpn->Misc[LW_ZH_I_FX]>0)
			__UpdateLWE_Sound(wpn);
		__UpdateLWE_BlockFlags(wpn);
	    __NPCCollision(wpn);
		__FlagTrigger(wpn);
		
		//LWeapon flags, level 2
	
		if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_NO_COLLISION)!=0)
			__UpdateLWF_Collision(wpn);
		//if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_HS_GRAB)!=0)
			//__HookshotPull(wpn);	
		//if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_LINK_FROZEN)!=0)
			//__UpdateLWF_Link_FreezeOn();
		if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_KNOCKBACK_OFF)!=0)
			__UpdateLWF_Knockback();
		if(GetLWeaponFlag2(wpn,LWF_SHADOW))
			DrawLWeaponShadow(wpn);	
    }
	
    // Start death effects
    else if(wpn->Misc[LW_ZH_I_ON_DEATH]!=0 && (wpn->Misc[LW_ZH_I_FLAGS]&__LWFI_DEATH_EFFECT_DONE)==0)
    {
		//LWeapon flags, level 2
		
		if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_PIERCES_ENEMIES)!=0)
			wpn->Misc[LW_ZH_I_FLAGS]&= ~LWF_PIERCES_ENEMIES;	
        if(wpn->Misc[LW_ZH_I_ON_DEATH]<8){
            if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_VANISH)
                wpn->DeadState=0;
            else if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_AIM_AT_NPC)
                __DoLWeaponDeathAimAtNPC(wpn);
            else if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_EXPLODE)
                __DoLWeaponDeathExplode(wpn);
            else if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_SBOMB_EXPLODE)
                __DoLWeaponDeathSBombExplode(wpn);
            else if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_4_FIREBALLS_HV)
                __DoLWeaponDeath4FireballsHV(wpn);
            else if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_4_FIREBALLS_DIAG)
                __DoLWeaponDeath4FireballsDiag(wpn);
            else if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_4_FIREBALLS_RANDOM)
                __DoLWeaponDeath4FireballsRand(wpn);
        }
        else // wpn->Misc[LW_ZH_I_ON_DEATH]>=8
        {
            if(wpn->Misc[LW_ZH_I_ON_DEATH]==EWD_8_FIREBALLS)
                __DoLWeaponDeath8Fireballs(wpn);
            //else if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_4_FIRES_HV)
                //__DoLWeaponDeath4FiresHV(wpn);
            else if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_4_FIRES_DIAG)
                __DoLWeaponDeath4FiresDiag(wpn);
            else if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_4_FIRES_RANDOM)
                __DoLWeaponDeath4FiresRand(wpn);
            else if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_8_FIRES)
                __DoLWeaponDeath8Fires(wpn);
            else if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_FIRE)
                __DoLWeaponDeathSingleFire(wpn);
			else if(wpn->Misc[LW_ZH_I_ON_DEATH]==LWD_SHAKES_SCREEN)
				__DoLWeaponDeathShaky(wpn);
		}
			
    } // End death effects
	
	//LWeapon flags, level 1

    if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_ITEM_PICKUP)!=0)
		__UpdateLWF_Pickup(wpn);
	if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_PIERCES_ENEMIES)!=0)
		__UpdateLWF_Pierce(wpn);
	if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_STUNS_ENEMIES)!=0)
		__UpdateLWF_Stun(wpn);
	if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_LINK_FLOATS)!=0)
		__UpdateLWF_Float();
	if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_ZERO_G)!=0)
		__UpdateLWF_G_Force(wpn);
	if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_LINK_NO_COLL)!=0)
		__UpdateLWF_Link_CollOff();	
	//if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_POISON)!=0)
		//__UpdateLWF_Poison(wpn);
}

//Handles LWeapons that continuously make sounds.

void __UpdateLWE_Sound(lweapon wpn){
	if(wpn->Misc[LW_ZH_I_WORK_2]>0){
		wpn->Misc[LW_ZH_I_WORK]=(wpn->Misc[LW_ZH_I_WORK]+1)%wpn->Misc[LW_ZH_I_WORK_2];
		if(wpn->Misc[LW_ZH_I_WORK]==0)Game->PlaySound(wpn->Misc[LW_ZH_I_FX]);
	}
}

void __UpdateLWM_FullScreen(lweapon wpn){
	if (IsOdd(wpn->Misc[LW_ZH_I_LIFESPAN_ARG])
		&& wpn->Misc[LW_ZH_I_MOVEMENT_ARG]>0) 
		Screen->Rectangle(4, 0, 0, 256, 176, 
							wpn->Misc[LW_ZH_I_MOVEMENT_ARG], 1, 
							0, 0, 0, true, wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]);
}

//Handles lweapon that's blocked by a combo.

void __UpdateLWE_BlockFlags(lweapon wpn){
	if(ComboTAtWpn(wpn)==LWBlockType(wpn)||(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_HOOKSHOT 
		&& ComboTAtWpn(wpn)!=CT_HOOKSHOTONLY && ComboTAtWpn(wpn)!=CT_LADDERHOOKSHOT)){
		if(wpn->Misc[LW_ZH_I_MOVEMENT]!=LWM_BRANG && wpn->Misc[LW_ZH_I_MOVEMENT]!=LWM_HOOKSHOT){
			KillLWeapon(wpn);
			Game->PlaySound(SFX_CLINK);
		}
		else{
			//if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_HOOKSHOT && ComboTAtWpn(wpn)==CT_HSGRAB)
			   //wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_HS_GRAB;
			//else
				wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_RETURN;
		}		
	}
}

void __UpdateLWM_Dual(lweapon wpn){
	if(ComboTAtWpn(wpn)==LWBlockType(wpn->Misc[LW_ZH_I_MOVEMENT_ARG],wpn)
		||ComboTAtWpn(wpn)==LWBlockType(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2],wpn)){
		KillLWeapon(wpn);
		Game->PlaySound(SFX_CLINK);	
	}
	bool trigger = false;
	if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_ARROW
		||wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]==LW_ARROW){
		if(ComboFIAtWpn(wpn,CF_ARROW)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_1)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_ARROW2)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_2)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_ARROW3)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_3)!=0)trigger = true;
		}
	}
	if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_BOMBBLAST
			||wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]==LW_BOMBBLAST){
		if(ComboFIAtWpn(wpn,CF_BOMB))trigger = true;
	}
	if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_SBOMBBLAST
			||wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]==LW_SBOMBBLAST){
		if(ComboFIAtWpn(wpn,CF_SBOMB))trigger = true;
	}
	if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_FIRE
			||wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]==LW_FIRE){
		if(ComboFIAtWpn(wpn,CF_CANDLE1)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_1)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_CANDLE2)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_2)!=0)trigger = true;
		}
	}
	if((wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_MAGIC
			||wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]==LW_MAGIC)
			&& ComboFIAtWpn(wpn,CF_WANDMAGIC)
			&& (wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_IS_REFLECTED)==0)trigger = true;
	if((wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_MAGIC
			||wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]==LW_MAGIC)
			&& ComboFIAtWpn(wpn,CF_REFMAGIC)
			&& (wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_IS_REFLECTED)!=0)trigger = true;
	//else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_MELEE){
		//if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_IS_SWORD){
			//if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_1)!=0)return CF_SWORD1;
			//else if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_2)!=0)return CF_SWORD2;
			//else if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_3)!=0)return CF_SWORD3;
			//else
				//return CF_SWORD4;
		//}
		//else if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_IS_HAMMER)
			//return CF_HAMMER;
		//else if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_IS_WAND)
			//return CF_WAND;
	//}
	if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_BEAM
			||wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]==LW_BEAM){
		if(ComboFIAtWpn(wpn,CF_SWORD1BEAM)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_1)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_SWORD2BEAM)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_2)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_SWORD3BEAM)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_3)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_SWORD4BEAM)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_4)!=0)trigger = true;
		}
	}
	//else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_HOOKSHOT)
		//return CF_HOOKSHOT;
	if(trigger){
		KillLWeapon(wpn);
		Screen->TriggerSecrets();
		Screen->State[ST_SECRET] = true;
		Game->PlaySound(SFX_SECRET);
	}
}

//Handles lweapons that move in a sine wave.

void __UpdateLWMSineWave(lweapon wpn){
		float offset;
		wpn->Misc[LW_ZH_I_WORK]+=wpn->Misc[LW_ZH_I_MOVEMENT_ARG2];
		
		// Adjust the weapon's position at an angle
		// perpendicular to that of its forward movement.
		offset=wpn->Misc[LW_ZH_I_MOVEMENT_ARG]*Sin(wpn->Misc[LW_ZH_I_WORK]);
		wpn->Misc[LW_ZH_I_XPOS]+=(wpn->Step/100)*RadianCos(wpn->Angle);
		wpn->Misc[LW_ZH_I_YPOS]+=(wpn->Step/100)*RadianSin(wpn->Angle);
		wpn->X=wpn->Misc[LW_ZH_I_XPOS]+offset*RadianCos(wpn->Angle+1.5708);
		wpn->Y=wpn->Misc[LW_ZH_I_YPOS]+offset*RadianSin(wpn->Angle+1.5708);
}

//Handles homing lweapons.

void __UpdateLWMHoming(lweapon wpn){
    // Wrap angle to 0..2*PI
    float currentAngle=wpn->Angle%6.2832;

    if(currentAngle<0)
        currentAngle+=6.2832;
	npc target_enemy;
	int target_number;
	// Find angle to Link and wrap it
	if(Screen->NumNPCs()>0){
		if(wpn->Misc[LW_ZH_I_WORK]==0)wpn->Misc[LW_ZH_I_WORK] = Rand(1,Screen->NumNPCs());
		for(int i=Screen->NumNPCs();i>0;i--){
			target_enemy = Screen->LoadNPC(i);
			if(target_enemy->ID==wpn->Misc[LW_ZH_I_WORK]
				&& target_enemy->Type!=NPCT_GUY && target_enemy->Type!=NPCT_FAIRY
				&& target_enemy->Type!=NPCT_ROCK
				&& (target_enemy->Defense[LWDefense(wpn->ID)]!=NPCDT_BLOCK||
				target_enemy->Defense[LWDefense(wpn->ID)]!=NPCDT_IGNORE))
				target_enemy->Misc[NPC_MISC_TARGET_NUMBER]=wpn->Misc[LW_ZH_I_WORK];
		}
		if(target_enemy->HP<=0)wpn->Misc[LW_ZH_I_WORK]=0;
		if(target_enemy->Misc[NPC_MISC_TARGET_NUMBER]==wpn->Misc[LW_ZH_I_WORK]){
			float targetAngle=RadianAngle(wpn->X, wpn->Y, target_enemy->X, target_enemy->Y);
			if(targetAngle<0)
				targetAngle+=6.2832;

			float diff=Abs(currentAngle-targetAngle);

			// Turn toward Link
			if(diff<wpn->Misc[LW_ZH_I_MOVEMENT_ARG] || diff>6.2832-wpn->Misc[LW_ZH_I_MOVEMENT_ARG])
				wpn->Angle=targetAngle;
			
			// Can't turn enough to point directly at him...
			else if(Sign(currentAngle-targetAngle)==Sign(diff-PI)) // current>target and diff>pi or
				wpn->Angle+=wpn->Misc[LW_ZH_I_MOVEMENT_ARG];         // current<target and diff<pi
			else                                                   // - Turn CW or CCW?
				wpn->Angle-=wpn->Misc[LW_ZH_I_MOVEMENT_ARG];

			SetLWeaponDir(wpn);
			
			// Decrement timer, unless it was negative to begin with
			if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]>0){
				wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]--;
				if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]<=0)
					Remove(wpn);
			}
		}
	}
	
}

//Handles Lweapons thrown in an arc.

void __UpdateLWMThrow(lweapon wpn)
{
    // LW_ZH_I_WORK: Current jump
    // LW_ZH_I_WORK_2: Current Z position
    // LW_ZH_I_MOVEMENT_ARG: Initial jump
    
    wpn->Jump=0; // Override engine handling of Z movement
    
    // Just thrown
    if(wpn->Misc[LW_ZH_I_WORK]==0 && wpn->Misc[LW_ZH_I_MOVEMENT_ARG]!=0)
    {
        wpn->Misc[LW_ZH_I_WORK]=wpn->Misc[LW_ZH_I_MOVEMENT_ARG];
        wpn->Misc[LW_ZH_I_MOVEMENT_ARG]=0;
    }
    
    // Fall
    wpn->Misc[LW_ZH_I_WORK_2]=Max(wpn->Misc[LW_ZH_I_WORK_2]+wpn->Misc[LW_ZH_I_WORK], 0);
    wpn->Z=wpn->Misc[LW_ZH_I_WORK_2];
    
    if(wpn->Misc[LW_ZH_I_WORK_2]>0) // Z>0
        wpn->Misc[LW_ZH_I_WORK]=Max(wpn->Misc[LW_ZH_I_WORK]-GH_GRAVITY, -GH_TERMINAL_VELOCITY);
	else{
		bool done=false;
        
        // Bounce
        if((wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]&LWMF_BOUNCE)!=0){
            // Falling fast enough?
            if(wpn->Misc[LW_ZH_I_WORK]<-0.5){ // Jump<=-0.5
                wpn->Misc[LW_ZH_I_WORK]*=-0.5;
                wpn->Step*=0.75;
            }
            // Not fast enough
            else
                done=true;
        }
        // Don't bounce
        else
            done=true;
        
        // Movement ended; stop or die?
        if(done){
            if((wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]&LWMF_DIE)!=0){
                wpn->Z=0;
                KillLWeapon(wpn);
            }
            else{
                wpn->Misc[LW_ZH_I_MOVEMENT]=0;
                wpn->Step=0;
            }
        }
	}
}

//Handles Lweapons that fall from the sky.

void __UpdateLWMFall(lweapon wpn)
{
    wpn->Jump=0; // Override engine handling of Z movement
    wpn->Misc[LW_ZH_I_WORK_2]-=wpn->Misc[LW_ZH_I_WORK];
    wpn->Z=wpn->Misc[LW_ZH_I_WORK_2];
    wpn->Misc[LW_ZH_I_WORK]=Min(wpn->Misc[LW_ZH_I_WORK]+GH_GRAVITY, GH_TERMINAL_VELOCITY);
	// Hit the ground
    // Still in the air; adjust velocity
    if(wpn->Misc[LW_ZH_I_WORK_2]>0) // Z>0
        wpn->Misc[LW_ZH_I_WORK]=Max(wpn->Misc[LW_ZH_I_WORK]-GH_GRAVITY, -GH_TERMINAL_VELOCITY);
	else{
		bool done=false;
        
        // Bounce
        if((wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]&LWMF_BOUNCE)!=0){
            // Falling fast enough?
            if(wpn->Misc[LW_ZH_I_WORK]<-0.5){ // Jump<=-0.5
                wpn->Misc[LW_ZH_I_WORK]*=-0.5;
                wpn->Step*=0.75;
            }
            // Not fast enough
            else
                done=true;
        }
        // Don't bounce
        else
            done=true;
        
        // Movement ended; stop or die?
        if(done){
            if((wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]&LWMF_DIE)!=0){
                wpn->Z=0;
                KillLWeapon(wpn);
            }
            else{
                wpn->Misc[LW_ZH_I_MOVEMENT]=0;
                wpn->Step=0;
            }
        }
	}
}

//Handles Lweapons that circle Link.

void __UpdateLWM_Circle(lweapon wpn){
	
	//if(wpn->Misc[LW_ZH_I_XPOS]==0 && wpn->HitXOffset!=0)
			//wpn->Misc[LW_ZH_I_XPOS]= wpn->HitXOffset;
	//if(wpn->Misc[LW_ZH_I_YPOS]== 0 && wpn->HitYOffset!=0)
		//wpn->Misc[LW_ZH_I_YPOS]= wpn->HitYOffset;	
	wpn->Misc[LW_ZH_I_WORK]= (wpn->Misc[LW_ZH_I_WORK]
								+((wpn->Step/100)*wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]))%360;
	wpn->HitXOffset = //wpn->Misc[LW_ZH_I_XPOS]+
						VectorX(wpn->Misc[LW_ZH_I_MOVEMENT_ARG],wpn->Misc[LW_ZH_I_WORK]);//)-(Link->X+8);
	wpn->HitYOffset = //wpn->Misc[LW_ZH_I_YPOS]+
						VectorY(wpn->Misc[LW_ZH_I_MOVEMENT_ARG],wpn->Misc[LW_ZH_I_WORK]);//)-(Link->Y+8);
	
	wpn->Angle = DegtoRad(wpn->Misc[LW_ZH_I_WORK]);
	SetLWeaponDir(wpn);
	wpn->X=Link->X;
	wpn->Y=Link->Y;							
	wpn->DrawXOffset= wpn->HitXOffset;
	wpn->DrawYOffset= wpn->HitYOffset;
}

//Handles Lweapons that act like the hookshot.

//void __UpdateLWM_Hookshot(lweapon wpn){
	//if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_RETURN)==0 
	    //&&(wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_HS_GRAB)==0){
		//if(wpn->Dir==DIR_LEFT||wpn->Dir==DIR_RIGHT){
			//if(Abs(wpn->X-Link->X+8)<=(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]*16)){
				//if(wpn->Dir==DIR_LEFT)wpn->Misc[LW_ZH_I_XPOS]--;
				//else if(wpn->Dir==DIR_RIGHT)wpn->Misc[LW_ZH_I_XPOS]++;
				//for(int i =0;i<=wpn->Misc[LW_ZH_I_MOVEMENT_ARG];i++){
					//lweapon particle = FireScriptedLWeapon(LW_SCRIPT1, Calc(wpn->X,Link->X+8,wpn->Misc[LW_ZH_I_MOVEMENT_ARG]), 
															//wpn->Y, wpn->Misc[LW_ZH_I_MOVEMENT_ARG2], 0, 0,LWF_NO_COLLISION);
					//SetLWeaponLifespan(particle,LWL_TIMER,1);
					//SetLWeaponDeathEffect(particle,LWD_VANISH,0);
				//}
			//}
			//else
				//wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_RETURN;
		//}
		//else{
			//if(Abs(wpn->Y-Link->Y+8)<=(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]*16)){
				//if(wpn->Dir==DIR_UP)wpn->Misc[LW_ZH_I_YPOS]--;
				//else if(wpn->Dir==DIR_DOWN)wpn->Misc[LW_ZH_I_YPOS]++;
				//for(int i =0;i<=wpn->Misc[LW_ZH_I_MOVEMENT_ARG];i++){
					//lweapon particle = FireScriptedLWeapon(LW_SCRIPT1, wpn->X, Calc(wpn->Y,Link->Y+8,wpn->Misc[LW_ZH_I_MOVEMENT_ARG]), 
						//								   wpn->Misc[LW_ZH_I_MOVEMENT_ARG2], 0, 0,LWF_NO_COLLISION);
					//SetLWeaponLifespan(particle,LWL_TIMER,1);
					//SetLWeaponDeathEffect(particle,LWD_VANISH,0);
				//}
			//}
			//else
				//wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_RETURN;
		//}
		//if(!OnScreen(wpn))
			//wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_RETURN;
		//Link->CollDetection = false;
		//NoAction();
	//}
	//SetLWeaponDir(wpn);
	//wpn->X= wpn->Misc[LW_ZH_I_XPOS];
	//wpn->Y= wpn->Misc[LW_ZH_I_YPOS];
//}

void __HookshotPull(lweapon wpn){
	wpn->Step = 0;
	if(Link->X!=wpn->X && Link->Y!=wpn->Y){
		if(Link->X<wpn->X)Link->X++;
		else
			Link->X--;
		if(Link->Y<wpn->Y)Link->Y++;
		else
			Link->Y--;
		Link->CollDetection = false;
		NoAction();
	}
	else{
		Link->CollDetection = true;
		KillLWeapon(wpn);
	}
}

void __NPCCollision(lweapon wpn){
	for(int i=Screen->NumNPCs();i>0;i--){
		npc n = Screen->LoadNPC(i);
		if(wpn->Misc[LW_ZH_I_MOVEMENT]!=LWM_FULL_SCREEN){
			if(Collision(wpn,n)){
				if(n->Defense[LWDefense(wpn->ID)]==NPCDT_BLOCK)
					__LWeaponClink(wpn,true);
				else if(n->Defense[LWDefense(wpn->ID)]==NPCDT_STUNORBLOCK)
					__LWeaponClink(wpn,false);
				else if(n->Defense[LWDefense(wpn->ID)]==NPCDT_IGNORE)
					SetLWeaponFlag2(wpn,LWF_TEMP_PIERCE);
				if(!GetLWeaponFlag2(wpn,LWF_TEMP_PIERCE)){
					if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_BRANG ||
					   wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_HOOKSHOT)
						wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_RETURN;
					else{
						if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_PIERCES_ENEMIES)==0)
							KillLWeapon(wpn);
					}
				}
			}
		}
		else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_FULL_SCREEN
				&& (n->Misc[GEN_MISC_FLAGS]&NPC_F_FULL_SCREEN)==0){
			wpn->X= n->X;
			wpn->Y= n->Y;
			n->Misc[GEN_MISC_FLAGS]|=NPC_F_FULL_SCREEN;
		}
		else{
			if(GetLWeaponFlag2(wpn,LWF_TEMP_PIERCE))
				UnSetLWeaponFlag2(wpn,LWF_TEMP_PIERCE);
		}
	}
}

//void __NPCCollision(lweapon wpn){
	//for(int i=Screen->NumNPCs();i>0;i--){
		//npc n = Screen->LoadNPC(i);
		//if(Collision(wpn,n)){
			//if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_DUAL_FX){
				//if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG])]==NPCDT_BLOCK){
					//if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_BLOCK)
						//__LWeaponClink(wpn,true);
					//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_STUNORBLOCK)
						//__LWeaponClink(wpn,false);
					//else{
						//int HitChance = Rand(0,100);
						//if(HitChance>=51)
							//__LWeaponClink(wpn,true);
						//else{
							//if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_HALFDAMAGE)
								//wpn->Damage/=2;
							//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_QUARTERDAMAGE)
								//wpn->Damage/=4;
							//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_ONEHITKILL){
								//n->HP = 0;
								//KillLWeapon(wpn);
							//}
						//}
					//}	
				//}
				//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG])]==NPCDT_STUNORBLOCK){
					//if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_BLOCK)
						//__LWeaponClink(wpn,true);
					//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_STUNORBLOCK)
						//__LWeaponClink(wpn,false);
					//else{
						//int HitChance = Rand(0,100);
						//if(HitChance>=51)
							//__LWeaponClink(wpn,true);
						//else{
							//if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_HALFDAMAGE)
								//wpn->Damage/=2;
							//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_QUARTERDAMAGE)
								//wpn->Damage/=4;
							//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_ONEHITKILL){
								//n->HP = 0;
								//KillLWeapon(wpn);
							//}
						//}
					///}	
				//}
				//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG])]==NPCDT_HALFDAMAGE){
					//if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_BLOCK)
						//__LWeaponClink(wpn,true);
					//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_STUNORBLOCK)
						//__LWeaponClink(wpn,false);
					//else{
						//if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_QUARTERDAMAGE)
							//wpn->Damage/=4;
						//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_ONEHITKILL){
							//n->HP = 0;
							//KillLWeapon(wpn);
						//}
						//else
							//n->Damage/=2;
					//}
				//}
				//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG])]==NPCDT_QUARTERDAMAGE){
					//if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_BLOCK)
						//__LWeaponClink(wpn,true);
					//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_STUNORBLOCK)
						//__LWeaponClink(wpn,false);
					//else{
						//if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_HALFDAMAGE)
							//wpn->Damage/=2;
						//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_ONEHITKILL){
							//n->HP = 0;
							//KillLWeapon(wpn);
						//}
						//else
							//n->Damage/=4;
					//}
				//}
				//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG])]==NPCDT_ONEHITKILL){
					//if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_BLOCK)
						//__LWeaponClink(wpn,true);
					//else if(n->Defense[LWDefense(wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])]==NPCDT_STUNORBLOCK)
						//__LWeaponClink(wpn,false);
					//else{
						//n->HP = 0;
						//KillLWeapon(wpn);
					//}
				//}
			//}
			//else{
				//if(n->Defense[LWDefense(wpn->ID)]==NPCDT_BLOCK)
					//__LWeaponClink(wpn,true);
				//else if(n->Defense[LWDefense(wpn->ID)]==NPCDT_STUNORBLOCK)
					//__LWeaponClink(wpn,false);
				//else if(n->Defense[LWDefense(wpn->ID)]==NPCDT_IGNORE)
					//SetLWeaponFlag2(wpn,LWF_TEMP_PIERCE);
				//if(!GetLWeaponFlag2(wpn,LWF_TEMP_PIERCE)){
					//if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_BRANG ||
					  // wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_HOOKSHOT)
						//wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_RETURN;
					//else{
						//if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_PIERCES_ENEMIES)==0)
							//KillLWeapon(wpn);
					//}
				//}
			//}
		//}
		//else{
			//if(GetLWeaponFlag2(wpn,LWF_TEMP_PIERCE))
				//UnSetLWeaponFlag2(wpn,LWF_TEMP_PIERCE);
		//}
	//}
//}

void __LWeaponClink(lweapon wpn, bool destroy){
	if(destroy){
		Game->PlaySound(SFX_CLINK);
		if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_PIERCES_ENEMIES)==0)
			KillLWeapon(wpn);
	}
	else{
		int HitChance = Rand(0,100);
		if(HitChance>=51){
			Game->PlaySound(SFX_CLINK);
			if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_PIERCES_ENEMIES)==0)
				KillLWeapon(wpn);
		}
	}
}

//Handles Lweapon that moves like a boomerang.

void __UpdateLWM_BRang(lweapon wpn){
	float currentAngle=wpn->Angle%6.2832;
	int RandX;
	int RandY;
	int PartX;
	int PartY;
    if(currentAngle<0)
        currentAngle+=6.2832;
	if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_RETURN)==0){
		if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]>0){
			//This boomerang isn't farther from Link than it's range.
			if(Abs(wpn->X-wpn->Misc[LW_ZH_I_XPOS])>wpn->Misc[LW_ZH_I_MOVEMENT_ARG]
			   ||Abs(wpn->Y-wpn->Misc[LW_ZH_I_YPOS])>wpn->Misc[LW_ZH_I_MOVEMENT_ARG])
			   wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_RETURN;
		}
		if(OnScreenEdge(wpn))
			   wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_RETURN;
	}
	if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_RETURN)!=0){
		//Set it not to collide with enemies.
		wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_NO_COLLISION;
		float targetAngle=RadianAngle(wpn->X, wpn->Y, CenterLinkX(), CenterLinkY());
		if(targetAngle<0)
			targetAngle+=6.2832;

		float diff=Abs(currentAngle-targetAngle);

		//Turn toward Link
		if(diff<wpn->Misc[LW_ZH_I_MOVEMENT_ARG2] || diff>6.2832-wpn->Misc[LW_ZH_I_MOVEMENT_ARG2])
			wpn->Angle=targetAngle;
		
		// Can't turn enough to point directly at him...
		else if(Sign(currentAngle-targetAngle)==Sign(diff-PI)) // current>target and diff>pi or
			wpn->Angle+=wpn->Misc[LW_ZH_I_MOVEMENT_ARG2];         // current<target and diff<pi
		else                                                   // - Turn CW or CCW?
			wpn->Angle-=wpn->Misc[LW_ZH_I_MOVEMENT_ARG2];

		SetLWeaponDir(wpn);
		
		if(LinkCollision(wpn))
			KillLWeapon(wpn);
	}
	//This boomerang makes sparkles.
	if(wpn->Misc[LW_ZH_I_LIFESPAN_ARG]>0){
		//Every 30 frames, create a sparkle.
		//This sparkle dies in 30 frames.
		wpn->Misc[LW_ZH_I_WORK_3]= (wpn->Misc[LW_ZH_I_WORK_3]+1)%5;
		if(wpn->Misc[LW_ZH_I_WORK_3]==0){
			if(wpn->Dir ==DIR_LEFT||wpn->Dir==DIR_RIGHT){
				RandY = Rand(-4,4);
				PartY = wpn->Y;
				PartX = CenterWpnX(wpn);
			}
			else{
				RandX = Rand(-4,4);
				PartX = wpn->X;
				PartY = CenterWpnY(wpn);
			}
			lweapon particle = FireLWeapon(LW_SCRIPT1,PartX+RandX,PartY+RandY,
											DegtoRad(0), 0, wpn->Damage, wpn->Misc[LW_ZH_I_LIFESPAN_ARG], 0, 0);
			SetLWeaponLifespan(particle,LWL_TIMER,60);
			SetLWeaponDeathEffect(particle,LWD_VANISH,0);
		}
	}
}

//Handles lweapon that is carried.

void __UpdateLWM_Carry(lweapon wpn){
	wpn->Misc[LW_ZH_I_XPOS]= Link->X;
	wpn->Misc[LW_ZH_I_YPOS]= Link->Y-16;
	wpn->X = wpn->Misc[LW_ZH_I_XPOS];
	wpn->Y = wpn->Misc[LW_ZH_I_YPOS];
	//else if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]== LWM_CARRY_SOM){
		//if((Link->X+16)==wpn->X && Between(Link->Y+8,wpn->Y,wpn->Y+wpn->HitHeight)
			//&& (Link->PressRight ||Link->InputRight) 
			//&& !Screen->isSolid(wpn->X+wpn->HitWidth,wpn->Y) 
			//&& !Screen->isSolid(wpn->X+wpn->HitWidth,wpn->Y+wpn->HitHeight)){
			//wpn->Misc[LW_ZH_I_XPOS]++;
		//}
		//else if((Link->X+16)==wpn->X && Between(Link->Y+8,wpn->Y,wpn->Y+wpn->HitHeight)
				//&& (Link->PressRight ||Link->InputRight) 
				//&& Screen->isSolid(wpn->X+wpn->HitWidth,wpn->Y) 
				//&& Screen->isSolid(wpn->X+wpn->HitWidth,wpn->Y+wpn->HitHeight)){
			//Link->PressRight = false;
			//Link->InputRight = false;
		//}
		//else if((Link->Y+16)==wpn->Y && Between(Link->X+8,wpn->X,wpn->X+wpn->HitWidth)
				//&& (Link->PressDown ||Link->InputDown) 
				//&& !Screen->isSolid(wpn->X,wpn->Y+wpn->HitHeight) 
				//&& !Screen->isSolid(wpn->X+wpn->HitWidth,wpn->Y+wpn->HitHeight)){
			//wpn->Misc[LW_ZH_I_YPOS]++;
		//}
		//else if((Link->Y+16)==wpn->Y && Between(Link->X+8,wpn->X,wpn->X+wpn->HitWidth)
				//&& (Link->PressDown ||Link->InputDown) 
				//&& Screen->isSolid(wpn->X,wpn->Y+wpn->HitHeight) 
				//&& Screen->isSolid(wpn->X+wpn->HitHeight,wpn->Y+wpn->HitHeight)){
			//Link->PressDown = false;
			//Link->InputDown = false;
		//}
		//else if(Link->X==(wpn->X+wpn->HitWidth) && Between(Link->Y+8,wpn->Y,wpn->Y+wpn->HitHeight)
				//&& (Link->PressLeft ||Link->InputLeft) 
				//&& !Screen->isSolid(wpn->X-1,wpn->Y) 
				//&& !Screen->isSolid(wpn->X-1,wpn->Y+wpn->HitHeight)){
			//wpn->Misc[LW_ZH_I_XPOS]--;
		//}
		//else if(Link->X==(wpn->X+wpn->HitWidth) && Between(Link->Y+8,wpn->Y,wpn->Y+wpn->HitHeight)
				//&& (Link->PressLeft ||Link->InputLeft) 
				//&& Screen->isSolid(wpn->X-1,wpn->Y) 
				//&& Screen->isSolid(wpn->X-1,wpn->Y+wpn->HitHeight)){
			//Link->PressLeft = false;
			//Link->InputLeft = false;
		//}
		//else if(Link->Y==(wpn->Y+wpn->HitHeight) && Between(Link->X+8,wpn->X,wpn->Y+wpn->HitWidth)
				//&& (Link->PressUp ||Link->InputUp) 
				//&& !Screen->isSolid(wpn->X,wpn->Y-1) 
				//&& !Screen->isSolid(wpn->X+wpn->HitHeight,wpn->Y-1)){
			//wpn->Misc[LW_ZH_I_YPOS]--;
		//}
		//else if(Link->Y==(wpn->Y+wpn->HitHeight) && Between(Link->X+8,wpn->X,wpn->Y+wpn->HitWidth)
				//&& (Link->PressUp ||Link->InputUp) 
				//&& Screen->isSolid(wpn->X,wpn->Y-1) 
				//&& Screen->isSolid(wpn->X+wpn->HitHeight,wpn->Y-1)){
			//Link->PressUp = false;
			//Link->InputUp = false;
		//}
		//wpn->X = wpn->Misc[LW_ZH_I_XPOS];
		//wpn->Y = wpn->Misc[LW_ZH_I_YPOS];
		//__UpdateLWE_Somaria(wpn);
	//}
	//else if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]== LWM_R_MAGNET){
		//if(Link->PressLeft||Link->InputLeft)
			//wpn->Misc[LW_ZH_I_XPOS]--;
		//else if(Link->PressRight||Link->InputRight)
			//wpn->Misc[LW_ZH_I_XPOS]++;
		//if(Link->PressUp||Link->InputUp)
			//wpn->Misc[LW_ZH_I_YPOS]--;
		//else if(Link->PressDown||Link->InputDown)
			//wpn->Misc[LW_ZH_I_YPOS]++;
		//Link->Dir= wpn->Dir;
		//wpn->X = wpn->Misc[LW_ZH_I_XPOS];
		//wpn->Y = wpn->Misc[LW_ZH_I_YPOS];
		//__UpdateLWE_Magnet(wpn);
	//}
}

//Handles Lweapons that pickup items.

void __UpdateLWF_Pickup(lweapon wpn){
	if(Screen->NumItems()>0){
		for(int i=1;i<=Screen->NumItems();i++){
			item anitem = Screen->LoadItem(i);
			for ( int r = 0; r < SizeOfArray(ItemsToPickup); r++ ) {
				if(anitem->isValid()){
					if ( anitem->ID == ItemsToPickup[r]) {
						if (Collision(wpn,anitem)) {
							if((wpn->Misc[LW_ZH_I_FLAGS]&LWF_INSTA_DELIVER)!=0){
								anitem->X = Link->X;
								anitem->Y = Link->Y;
							}
							else{
								if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_BRANG)
									wpn->Misc[LW_ZH_I_FLAGS_2]|= LWF_RETURN;
								anitem->X = wpn->X;
								anitem->Y = wpn->Y;
								if(LinkCollision(wpn)){
									anitem->X = Link->X;
									anitem->Y = Link->Y;
								}
							}
						}
						
					}
				}
				else
					continue;
			}
		}
	}
}

//Handles Lweapons that pierce enemies.

void __UpdateLWF_Pierce(lweapon wpn){
	wpn->DeadState = WDS_ALIVE;
}

//Handles Lweapons that stun enemies.

void __UpdateLWF_Stun(lweapon wpn){
	if(Screen->NumNPCs()>0){
		for(int i=Screen->NumNPCs();i>0;i--){
			npc thing = Screen->LoadNPC(i);
			if(thing->HP<=0)break;
			if(Collision(thing,wpn) && (thing->Defense[LWDefense(wpn->ID)]==NPCDT_STUN
				|| thing->Defense[LWDefense(wpn->ID)]==NPCDT_STUNORBLOCK
				|| thing->Defense[LWDefense(wpn->ID)]==NPCDT_STUNORIGNORE)){
				if(thing->Defense[LWDefense(wpn->ID)]!=NPCDT_STUN){
					int StunChance = Rand(0,100);
					if(StunChance>50)thing->Stun= Rand(0,MAX_STUN_TIME);
				}
				else
					thing->Stun = Rand(0,MAX_STUN_TIME);
				KillLWeapon(wpn);
			}
		}
	}
}

void __UpdateLWF_Float(){
	if(IsSideview())
		Link->Jump = 0;
	else{
		Link->Z = 1;
		Link->Jump = 0;
	}
}

//Handles lweapons that are reflected off of magic mirrors.

void __UpdateLWF_Reflect(lweapon wpn){
	float angle;
	lweapon new;
	if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_WAS_REFLECTED)==0){
		if(ComboTAtWpn(wpn,CT_MIRROR)||
			ComboTAtWpn(wpn,CT_MIRRORBACKSLASH)||
			ComboTAtWpn(wpn,CT_MIRRORSLASH)){
		   if(ComboTAtWpn(wpn)==CT_MIRRORSLASH){
				if(wpn->Dir==DIR_UP){
					angle = DegtoRad(0);
					wpn->Y-=16;
				}
				else if(wpn->Dir==DIR_DOWN){
					angle = DegtoRad(180);
					wpn->Y+=16;
				}
				else if(wpn->Dir==DIR_LEFT){
					angle = DegtoRad(270);
					wpn->X-=16;
				}
				else if(wpn->Dir==DIR_RIGHT){
					angle = DegtoRad(90);
					wpn->X+=16;
				}
		   }
		   else if(ComboTAtWpn(wpn)==CT_MIRRORBACKSLASH){
				if(wpn->Dir==DIR_UP){
					angle = DegtoRad(180);
					wpn->Y-=16;
				}
				else if(wpn->Dir==DIR_DOWN){
					angle = DegtoRad(0);
					wpn->Y+=16;
				}
				else if(wpn->Dir==DIR_LEFT){
					angle = DegtoRad(90);
					wpn->X-=16;
				}
				else if(wpn->Dir==DIR_RIGHT){
					angle = DegtoRad(270);
					wpn->X+=16;
				}
		   }
		   wpn->X=WeaponXLoc(wpn);
		   wpn->Y=WeaponYLoc(wpn);
		   wpn->Angle = angle;
		   SetLWeaponDir(wpn);
		   //if(wpn->TileHeight==0 && wpn->TileWidth==0)
				//new = FireLWeapon(wpn->ID, wpn->X, wpn->Y, angle, wpn->Step, wpn->Damage, wpn->Misc[LW_ZH_I_LIFESPAN_ARG], wpn->Misc[LW_ZH_I_FX], wpn->Misc[LW_ZH_I_FLAGS]);
			//else
				//new = FireBigLWeapon(wpn->ID, wpn->X, wpn->Y, angle, wpn->Step, wpn->Damage, wpn->Misc[LW_ZH_I_LIFESPAN_ARG], wpn->Misc[LW_ZH_I_FX], wpn->Misc[LW_ZH_I_FLAGS],wpn->TileHeight,wpn->TileWidth);
			//SetLWeaponLifespan(new, wpn->Misc[LW_ZH_I_LIFESPAN], wpn->Misc[LW_ZH_I_LIFESPAN_ARG]);
			//SetLWeaponMovement(new,wpn->Misc[LW_ZH_I_MOVEMENT],wpn->Misc[LW_ZH_I_MOVEMENT_ARG],wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]);
			//if(wpn->Misc[LW_ZH_I_FX]>0)
				//SetLWeaponSFX(new, wpn->Misc[LW_ZH_I_FX], wpn->Misc[LW_ZH_I_WORK_2]);
			//SetLWeaponDeathEffect(new, wpn->Misc[LW_ZH_I_ON_DEATH], wpn->Misc[LW_ZH_I_ON_DEATH_ARG]);
			//new->Misc[LW_ZH_I_FLAGS_2]|=wpn->Misc[LW_ZH_I_FLAGS_2]|LWF_WAS_REFLECTED;			
			//Remove(wpn);
			wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_WAS_REFLECTED;			
		}
	}
	else if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_WAS_REFLECTED)!=0){
		if(!ComboTAtWpn(wpn,CT_MIRROR)&&
			!ComboTAtWpn(wpn,CT_MIRRORBACKSLASH)&&
			!ComboTAtWpn(wpn,CT_MIRRORSLASH)){
			wpn->Misc[LW_ZH_I_FLAGS_2]&=~LWF_WAS_REFLECTED;
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_IS_REFLECTED)==0)
				wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_IS_REFLECTED;
		}
	}
}

//Makes lweapon ignore gravity

void __UpdateLWF_G_Force(lweapon wpn){
	wpn->Jump = 0;
}

//Turns an lweapons collision detection off.

void __UpdateLWF_Collision(lweapon wpn){
	wpn->CollDetection= false;
}

//Makes Link invincible while this is active.

void __UpdateLWF_Link_CollOff(){
	if(Link->CollDetection){
		Link->CollDetection= false;
		LW_Vars[NOT_COLL]=0;
	}
	else if(!LW_Vars[NOT_COLL] && !Link->CollDetection)
		LW_Vars[NOT_COLL]=1;
}

//Makes it where Link can't move while this lweapon is active.

void __UpdateLWF_Link_FreezeOn(){
	NoAction();
}

void __UpdateLWF_Knockback(){
	if ( ( Link->Action == LA_GOTHURTLAND || Link->Action == LA_GOTHURTWATER ) && Link->HitDir != -1 ) {
		Link->HitDir = -1;
	}
}

void __UpdateLWM_Melee(lweapon wpn){
	if(OnScreenEdge(wpn)){
		if(wpn->Dir==DIR_UP){
			wpn->HitYOffset-=wpn->HitHeight/2;
			wpn->DrawYOffset-=wpn->HitHeight/2;
		}
		else if(wpn->Dir==DIR_DOWN){
			wpn->HitYOffset+=wpn->HitHeight/2;
			wpn->DrawYOffset+=wpn->HitHeight/2;
		}
		else if(wpn->Dir==DIR_LEFT){
			wpn->HitXOffset-=wpn->HitWidth/2;
			wpn->DrawXOffset-=wpn->HitWidth/2;
		}
		else if(wpn->Dir==DIR_RIGHT){
			wpn->HitXOffset+=wpn->HitWidth/2;
			wpn->DrawXOffset+=wpn->HitWidth/2;
		}
	}
	else{
		wpn->HitXOffset =0;
		wpn->HitYOffset =0;
		wpn->DrawXOffset=0;
		wpn->DrawYOffset=0;
	}
	if((wpn->Misc[LW_ZH_I_MOVEMENT_ARG2]&LWMF_SLASH)!=0){
		int loc = ComboAt(wpn->X+8,wpn->Y+8);
		DoDashSlash(loc);
	}
}

void __FlagTrigger(lweapon wpn){
	bool trigger = false;
	if(wpn->ID==LW_ARROW){
		if(ComboFIAtWpn(wpn,CF_ARROW)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_1)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_ARROW2)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_2)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_ARROW3)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_3)!=0)trigger = true;
		}
	}
	else if(wpn->ID==LW_FIRE){
		if(ComboFIAtWpn(wpn,CF_CANDLE1)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_1)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_CANDLE2)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_2)!=0)trigger = true;
		}
	}
	else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_BRANG){
		if(ComboFIAtWpn(wpn,CF_BRANG1)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_1)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_BRANG2)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_2)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_BRANG3)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_3)!=0)trigger = true;
		}
	}
	else if(wpn->ID==LW_MAGIC && ComboFIAtWpn(wpn,CF_WANDMAGIC))trigger = true;
	else if(wpn->ID==LW_MAGIC && ComboFIAtWpn(wpn,CF_WANDFIRE)
			&& (wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_3)!=0)trigger = true;
	else if(wpn->ID==LW_MAGIC && ComboFIAtWpn(wpn,CF_REFMAGIC)
			&& (wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_IS_REFLECTED)!=0)trigger = true;
	//else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_MELEE){
		//if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_IS_SWORD){
			//if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_1)!=0)return CF_SWORD1;
			//else if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_2)!=0)return CF_SWORD2;
			//else if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_3)!=0)return CF_SWORD3;
			//else
				//return CF_SWORD4;
		//}
		//else if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_IS_HAMMER)
			//return CF_HAMMER;
		//else if(wpn->Misc[LW_ZH_I_MOVEMENT_ARG]==LW_IS_WAND)
			//return CF_WAND;
	//}
	else if(wpn->ID==LW_BEAM){
		if(ComboFIAtWpn(wpn,CF_SWORD1BEAM)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_1)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_SWORD2BEAM)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_2)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_SWORD3BEAM)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_3)!=0)trigger = true;
		}
		if(ComboFIAtWpn(wpn,CF_SWORD4BEAM)){
			if((wpn->Misc[LW_ZH_I_FLAGS_2]&LWF_LEVEL_4)!=0)trigger = true;
		}
	}
	//else if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_HOOKSHOT)
		//return CF_HOOKSHOT;
	if(trigger){
		if(wpn->Misc[LW_ZH_I_MOVEMENT]==LWM_BRANG)
			wpn->Misc[LW_ZH_I_FLAGS_2]|=LWF_RETURN;
		else
			KillLWeapon(wpn);
		Screen->TriggerSecrets();
		Screen->State[ST_SECRET] = true;
		Game->PlaySound(SFX_SECRET);
	}
}
